package persistence.model;

import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import persistence.model.meta.DataType;
import persistence.model.util.ReflectionUtil;

import java.lang.reflect.Field;
import java.util.Optional;

public class EntityColumn {
    private final String name;

    private final Field field;

    private final DataType dataType;

    private final int length;

    public EntityColumn(String name, Field field, DataType dataType, int length) {
        this.name = name;
        this.field = field;
        this.dataType = dataType;
        this.length = length;
    }

    public static EntityColumn build(Field field) {
        String name = getName(field);
        int length = getLength(field);
        DataType dataType = DataType.getByJavaType(field.getType());
        return new EntityColumn(name, field, dataType, length);
    }

    private static String getName(Field field) {
        return ReflectionUtil.getAnnotationIfPresent(field, Column.class)
                .map(Column::name)
                .filter(name -> !name.isEmpty())
                .orElse(field.getName());
    }

    private static int getLength(Field field) {
        Optional<Column> annotation = ReflectionUtil.getAnnotationIfPresent(field, Column.class);

        if (annotation.isPresent() && annotation.get().length() != 255) {
            return annotation.get().length();
        }
        DataType dataType = DataType.getByJavaType(field.getType());
        return dataType.getDefaultLength();
    }

    public String getName() {
        return name;
    }

    public DataType getDataType() {
        return dataType;
    }

    public int getLength() {
        return length;
    }

    public Boolean isNullable() {
        if (field.isAnnotationPresent(Id.class)) {
            return false;
        }
        if (!field.isAnnotationPresent(Column.class)) {
            return true;
        }
        return ReflectionUtil.getAnnotationIfPresent(field, Column.class)
                .map(column -> column.nullable() && !column.unique())
                .orElse(false);
    }

    public Boolean isPrimary() {
        return field.isAnnotationPresent(Id.class);
    }

    public Boolean isAutoGeneratedIdentity() {
        return ReflectionUtil.getAnnotationIfPresent(field, GeneratedValue.class)
                .map(annotation -> annotation.strategy().equals(GenerationType.IDENTITY))
                .orElse(false);
    }
}
